#!/usr/bin/env python
02
"""
03
Author: Timothy A.V. Teatro <http://www.timteatro.net>
04
Date  : Oct 25, 2010
05
Lisence: Creative Commons BY-SA
06
(http://creativecommons.org/licenses/by-sa/2.0/)
07
 
08
Description:
09
   A program which uses an explicit finite difference
10
   scheme to solve the diffusion equation with fixed
11
   boundary values and a given initial value for the
12
   density u(x,y,t). This version uses a numpy
13
   expression which is evaluated in C, so the
14
   computation time is greatly reduced over plain
15
   Python code.
16
 
17
   This version also uses matplotlib to create an
18
   animation of the time evolution of the density.
19
"""
20
import scipy as sp
21
import matplotlib
22
matplotlib.use('GTKAgg') # Change this as desired.
23
import gobject
24
from pylab import *
25
# Declare some variables:
26
 
27
dx=0.01        # Interval size in x-direction.
28
dy=0.01        # Interval size in y-direction.
29
a=0.5          # Diffusion constant.
30
timesteps=500  # Number of time-steps to evolve system.
31
 
32
nx = int(1/dx)
33
ny = int(1/dy)
34
 
35
dx2=dx**2 # To save CPU cycles, we'll compute Delta x^2
36
dy2=dy**2 # and Delta y^2 only once and store them.
37
 
38
# For stability, this is the largest interval possible
39
# for the size of the time-step:
40
dt = dx2*dy2/( 2*a*(dx2+dy2) )
41
 
42
# Start u and ui off as zero matrices:
43
ui = sp.zeros([nx,ny])
44
u = sp.zeros([nx,ny])
45
 
46
# Now, set the initial conditions (ui).
47
for i in range(nx):
48
   for j in range(ny):
49
      if ( ( (i*dx-0.5)**2+(j*dy-0.5)**2 <= 0.1)
50
         & ((i*dx-0.5)**2+(j*dy-0.5)**2>=.05) ):
51
            ui[i,j] = 1
52
 
53
def evolve_ts(u, ui):
54
   """
55
   This function uses a numpy expression to
56
   evaluate the derivatives in the Laplacian, and
57
   calculates u[i,j] based on ui[i,j].
58
   """
59
   u[1:-1, 1:-1] = ui[1:-1, 1:-1] + a*dt*( (ui[2:, 1:-1] - 2*ui[1:-1, 1:-1] + ui[:-2, 1:-1])/dx2 + (ui[1:-1, 2:] - 2*ui[1:-1, 1:-1] + ui[1:-1, :-2])/dy2 )
60
 
61
def updatefig(*args):
62
   global u, ui, m
63
   im.set_array(ui)
64
   manager.canvas.draw()
65
   # Uncomment the next two lines to save images as png
66
   # filename='diffusion_ts'+str(m)+'.png'
67
   # fig.savefig(filename)
68
   u[1:-1, 1:-1] = ui[1:-1, 1:-1] + a*dt*(
69
      (ui[2:, 1:-1] - 2*ui[1:-1, 1:-1] + ui[:-2, 1:-1])/dx2
70
      + (ui[1:-1, 2:] - 2*ui[1:-1, 1:-1] + ui[1:-1, :-2])/dy2 )
71
   ui = sp.copy(u)
72
   m+=1
73
   print "Computing and rendering u for m =", m
74
   if m >= timesteps:
75
      return False
76
   return True
77
 
78
fig = plt.figure(1)
79
img = subplot(111)
80
im = img.imshow( ui, cmap=cm.hot, interpolation='nearest', origin='lower')
81
manager = get_current_fig_manager()
82
 
83
m=1
84
fig.colorbar( im ) # Show the colorbar along the side
85
 
86
# once idle, call updatefig until it returns false.
87
gobject.idle_add(updatefig)
88
show()

